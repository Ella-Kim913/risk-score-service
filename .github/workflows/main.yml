name: CI/CD Pipeline for Risk Score Service

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  # This variable must be manually set in GitHub Repo Settings (Environment Variables)
  # Example value: ella-kim913/risk-score-service
  GHCR_PATH: ${{ vars.GHCR_LOWERCASE_REPO }}

  # Standard GitHub context variables (NO custom logic here to avoid parser errors)
  FULL_SHA: ${{ github.sha }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Necessary to push to GitHub Container Registry AND needed by test reporter
      checks: write # Needed for dorny/test-reporter

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and Test with Maven
        run: ./mvnw clean install

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # FIXED TAGS: Using only the reliable FULL_SHA and 'latest' tags

          tags: |
            ${{ env.REGISTRY }}/${{ env.GHCR_PATH }}:${{ env.FULL_SHA }}
            ${{ env.REGISTRY }}/${{ env.GHCR_PATH }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always() # Run even if Maven fails
        with:
          name: Unit Test Report
          path: target/surefire-reports/TEST-*.xml
          reporter: java-junit
          fail-on-error: true

  # --------------------------------------------------------------------------------------------------

  deploy-to-gke:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read # Needed to ensure package access for job dependencies
      id-token: write # Required for Google's authentication method

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. AUTHENTICATE TO GCP
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # 2. GET GKE CREDENTIALS (Configures kubectl)
      - name: Configure GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: 'riskscore-cluster-1'
          location: 'us-central1'
          project_id: 'ancient-dragon-429002-n8'

      # 3. Setup Kubectl (Installs the kubectl binary)
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3

      # 4. DEPLOY: Update the K8s Deployment with the new image tag
      - name: Deploy New Image Version
        run: |
          # Use the full, immutable SHA for deployment (most traceable version)
          FULL_IMAGE_TAG="${{ env.REGISTRY }}/${{ env.GHCR_PATH }}:${{ env.FULL_SHA }}"
          
          echo "Deploying image: $FULL_IMAGE_TAG"
          
          # This command triggers the rolling update on GKE
          kubectl set image deployment/risk-score-deployment risk-score-container=$FULL_IMAGE_TAG --record

      # 5. VERIFY: Wait for the rolling update to complete
      - name: Verify Deployment Rollout Status
        run: |
          kubectl rollout status deployment/risk-score-deployment --timeout=5m