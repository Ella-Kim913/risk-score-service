name: CI/CD Pipeline for Risk Score Service

on:
  push:
    branches:
      - main

env:
  # Define variables once for use throughout the workflow
  REGISTRY: ghcr.io
  # IMAGE_NAME automatically becomes <your_username>/risk-score-service
  IMAGE_NAME: ${{ github.repository }} 
  # TAG is the unique commit SHA (version)
  TAG: ${{ github.sha }}
  # Short tag for convenience
  SHORT_SHA: ${{ github.sha }}:7] 

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Necessary to push to GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # 1. Calculate Lowercase Image Name and Short SHA (FIXES BOTH ERRORS)
      - name: Calculate Image Name and Tags
        id: vars
        run: |
          # Use Bash string manipulation (available on Ubuntu runner) to lowercase the repo name
          # The ${VAR,,} syntax forces lowercase
          REPO_LOWERCASE=${{ github.repository }}
          
          # The next line creates an output variable for use in subsequent steps:
          echo "IMAGE_NAME_LOWERCASE=${REPO_LOWERCASE,,}" >> $GITHUB_OUTPUT
          
          # Use Bash string slicing to get the short SHA
          echo "SHORT_SHA_CLEAN=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT 
          
          # To ensure the workflow definition itself is valid, we remove the env block variables
          # that relied on the broken functions.

        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and Test with Maven
        run: ./mvnw clean install

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Your GitHub username
          # Uses the built-in GITHUB_TOKEN for password
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # CRITICAL FIX: Ensure all three lines correctly reference the output variable and tag components
          tags: |
            ghcr.io/${{ steps.vars.outputs.IMAGE_NAME_LOWERCASE }}:${{ github.sha }}
            ghcr.io/${{ steps.vars.outputs.IMAGE_NAME_LOWERCASE }}:${{ steps.vars.outputs.SHORT_SHA_CLEAN }}
            ghcr.io/${{ steps.vars.outputs.IMAGE_NAME_LOWERCASE }}:latest
          cache-from: type=gha 
          cache-to: type=gha,mode=max 

  ### The Deployment Job (Simulated Deployment) ###
  deploy-to-gke:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      id-token: write # Required for Google's authentication method

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl (Required for deployment)
        uses: azure/setup-kubectl@v3 # Standard GitHub action to get kubectl

      # --- AUTHENTICATION FIX: Replace the manual config step ---

      # 1. Authenticate to GCP (This is where the magic happens)
      #    NOTE: You must set up Workload Identity Federation in GCP for this to work
      #    If you haven't set up WIF, use the simpler but less secure method below.
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}' # Placeholder for a Service Account Key (less secure)

      # 2. Get GKE Credentials (Configures kubectl to talk to your cluster)
      - uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: 'riskscore-cluster-1' # Your Cluster Name
          location: 'us-central1'             # Your Cluster Region
          project_id: 'ancient-dragon-429002-n8' # Your Project ID

      # 3. Setup Kubectl (Still needed to install the kubectl binary)
      - uses: azure/setup-kubectl@v3

      # 2. DEPLOY: Update the K8s Deployment with the new image tag
      - name: Deploy New Image Version
        run: |
          FULL_IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}"
          
          # This command tells the GKE Deployment to pull the newly built image
          # risk-score-container is the name of the container in your k8s-deployment.yaml
          kubectl set image deployment/risk-score-deployment risk-score-container=$FULL_IMAGE_TAG --record

      # 3. VERIFY: Wait for the rolling update to complete
      - name: Verify Deployment Rollout Status
        run: |
          kubectl rollout status deployment/risk-score-deployment --timeout=5m
